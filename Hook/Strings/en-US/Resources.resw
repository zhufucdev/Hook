<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddButtonText.Text" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="AppLanguageCombo.Header" xml:space="preserve">
    <value>App Language</value>
  </data>
  <data name="AppLanguageCombo.PlaceholderText" xml:space="preserve">
    <value>Follow System</value>
  </data>
  <data name="BuiltinConverter.Name" xml:space="preserve">
    <value>Built-in converter</value>
  </data>
  <data name="CancelButton.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ClearButton.Text" xml:space="preserve">
    <value>Clear the list</value>
  </data>
  <data name="CloseButton.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ConverterHeader.Text" xml:space="preserve">
    <value>Converter</value>
  </data>
  <data name="ConverterNotFound.Content" xml:space="preserve">
    <value>Selected converter whose id is %s was not found. Switching to default</value>
  </data>
  <data name="ConverterNotFound.Title" xml:space="preserve">
    <value>No Such Converter</value>
  </data>
  <data name="ConvertHeader.Text" xml:space="preserve">
    <value>Converting to Web Page</value>
  </data>
  <data name="DeveloperModeToggle.OffContent" xml:space="preserve">
    <value>DeveloperMode Disabled</value>
  </data>
  <data name="DeveloperModeToggle.OnContent" xml:space="preserve">
    <value>DeveloperMode Enabled</value>
  </data>
  <data name="DropInstallBody.Text" xml:space="preserve">
    <value>.hplugin files are supported, which provide plugin's functions</value>
  </data>
  <data name="DropInstallHeader.Text" xml:space="preserve">
    <value>Drop to Install</value>
  </data>
  <data name="ErrorOpen.Title" xml:space="preserve">
    <value>Error While Opening the File</value>
  </data>
  <data name="Exception.Manifest" xml:space="preserve">
    <value>Invalidate Plug-In: Manifest not found</value>
  </data>
  <data name="GeneralHeader.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Home.Header" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="HomeHeader.Text" xml:space="preserve">
    <value>What do you want to do?</value>
  </data>
  <data name="ManageHeader.Text" xml:space="preserve">
    <value>Tune Your Preferences</value>
  </data>
  <data name="NotSupported.Content" xml:space="preserve">
    <value>Opening unsupported %s file</value>
  </data>
  <data name="NotSupported.Title" xml:space="preserve">
    <value>Unsupported File Format</value>
  </data>
  <data name="PlugInFailure.Title" xml:space="preserve">
    <value>Unable to Initialized Plug-In %s</value>
  </data>
  <data name="PlugInHeader.Text" xml:space="preserve">
    <value>Manage Plug-Ins</value>
  </data>
  <data name="PlugInInstallationFailure.Content" xml:space="preserve">
    <value>The installation program reported a %e% excpetion: %s</value>
  </data>
  <data name="PlugInInstallationFailure.Title" xml:space="preserve">
    <value>Unable to Install the Plug-In</value>
  </data>
  <data name="PlugInLoadDependNotFound.Message" xml:space="preserve">
    <value>Plug-In %s% depends on %d%, which is not loaded. Thus, this plugin is not to be loaded</value>
  </data>
  <data name="PlugInLoadDependNotFound.Title" xml:space="preserve">
    <value>Dependency Not Found</value>
  </data>
  <data name="PlugInLoadHeader.Text" xml:space="preserve">
    <value>Loading Plug-Ins</value>
  </data>
  <data name="PlugInsUIHeader.Text" xml:space="preserve">
    <value>Plug-In</value>
  </data>
  <data name="RecentHeader.Text" xml:space="preserve">
    <value>Recent Opened</value>
  </data>
  <data name="ReloadToApply.Message" xml:space="preserve">
    <value>The settings you've changed just now require you to reload the app to be fully applied</value>
  </data>
  <data name="ReloadToApply.Title" xml:space="preserve">
    <value>Reload to Apply</value>
  </data>
  <data name="RemoveButton.Text" xml:space="preserve">
    <value>Remove this item</value>
  </data>
  <data name="ReplaceButton.Text" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="ReplacePlugin.Content" xml:space="preserve">
    <value>Plug-In named %name% has already been installed. Replace it?</value>
  </data>
  <data name="ReplacePlugin.Title" xml:space="preserve">
    <value>Plug-In Exists</value>
  </data>
  <data name="SettingsHeader.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ShortcutHeader.Pattern" xml:space="preserve">
    <value>Shortcuts Provided by %s</value>
  </data>
  <data name="StartupDeny.Message" xml:space="preserve">
    <value>To enable full functionality of the plugin, allow the app to start with system in Windows Settings or Task Manager</value>
  </data>
  <data name="StartupDeny.Title" xml:space="preserve">
    <value>Startup Permission Denied</value>
  </data>
  <data name="Uninstallation.Content" xml:space="preserve">
    <value>All the data will be deleted and can not be restored. Continue?</value>
  </data>
  <data name="Uninstallation.Title" xml:space="preserve">
    <value>Shall Uninstall the Plug-In</value>
  </data>
  <data name="UninstallButton.Text" xml:space="preserve">
    <value>Uninstall</value>
  </data>
  <data name="UnknownHeader.Text" xml:space="preserve">
    <value>Unknown</value>
  </data>
</root>